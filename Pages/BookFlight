import React, { useState, useEffect } from "react";
import { Flight, Booking } from "@/entities/all";
import { Card, CardContent, CardHeader } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { motion } from "framer-motion";
import { Skeleton } from "@/components/ui/skeleton";
import {
  Plane,
  Clock,
  MapPin,
  Calendar,
  Users,
  ArrowRight,
  ArrowLeft,
  CheckCircle
} from "lucide-react";
import { format, parseISO } from "date-fns";
import { Link, useNavigate } from "react-router-dom";
import { createPageUrl } from "@/utils";
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogDescription,
  DialogFooter
} from "@/components/ui/dialog";

export default function BookFlightPage() {
  const navigate = useNavigate();
  const [flights, setFlights] = useState([]);
  const [isLoading, setIsLoading] = useState(true);
  const [destination, setDestination] = useState("");
  const [selectedFlight, setSelectedFlight] = useState(null);
  const [isBooking, setIsBooking] = useState(false);
  const [bookingDetails, setBookingDetails] = useState({ passenger_name: "", passenger_email: "" });
  const [bookingSuccess, setBookingSuccess] = useState(false);

  useEffect(() => {
    const urlParams = new URLSearchParams(window.location.search);
    const dest = urlParams.get("destination");
    if (dest) {
      setDestination(dest);
      loadFlights(dest);
    } else {
      setIsLoading(false);
    }
  }, []);

  const loadFlights = async (destination) => {
    setIsLoading(true);
    try {
      const data = await Flight.filter({ destination: destination });
      setFlights(data);
    } catch (error) {
      console.error("Error loading flights:", error);
    }
    setIsLoading(false);
  };

  const handleBookingSubmit = async (e) => {
    e.preventDefault();
    if (!selectedFlight || !bookingDetails.passenger_name || !bookingDetails.passenger_email) return;

    setIsBooking(true);
    try {
      const newBooking = {
        booking_reference: `MAV-${Math.random().toString(36).substr(2, 6).toUpperCase()}`,
        flight_id: selectedFlight.id,
        passenger_name: bookingDetails.passenger_name,
        passenger_email: bookingDetails.passenger_email,
        class: "economy", // Default class
        total_price: selectedFlight.price_economy,
        status: "confirmed"
      };
      await Booking.create(newBooking);
      setBookingSuccess(true);
    } catch (error) {
      console.error("Error creating booking:", error);
    } finally {
      setIsBooking(false);
    }
  };

  const closeDialogs = () => {
    setSelectedFlight(null);
    setBookingSuccess(false);
    setBookingDetails({ passenger_name: "", passenger_email: "" });
  };
  
  if (!destination) {
    return (
       <div className="text-center py-20">
         <h2 className="text-2xl font-bold mb-4">No Destination Selected</h2>
         <p className="text-slate-600 mb-6">Please select a destination to view available flights.</p>
         <Link to={createPageUrl("Destinations")}>
           <Button>Explore Destinations</Button>
         </Link>
       </div>
    );
  }

  return (
    <div className="min-h-screen bg-gradient-to-b from-slate-50 to-white py-12">
      <div className="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8">
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.6 }}
          className="mb-12"
        >
          <Button variant="outline" onClick={() => navigate(createPageUrl('Destinations'))} className="mb-4">
            <ArrowLeft className="mr-2 h-4 w-4" />
            Back to Destinations
          </Button>
          <h1 className="text-4xl md:text-5xl font-bold text-slate-800">
            Flights to {destination}
          </h1>
        </motion.div>

        <div className="space-y-6">
          {isLoading ? (
            Array(3).fill(0).map((_, i) => (
              <Skeleton key={i} className="h-40 w-full rounded-lg" />
            ))
          ) : flights.length > 0 ? (
            flights.map((flight) => (
              <motion.div
                key={flight.id}
                initial={{ opacity: 0, y: 20 }}
                animate={{ opacity: 1, y: 0 }}
                transition={{ duration: 0.6 }}
              >
                <Card className="hover:shadow-lg transition-shadow">
                  <CardContent className="p-6 grid md:grid-cols-3 gap-6 items-center">
                    <div className="md:col-span-2 space-y-4">
                      <div className="flex items-center gap-4">
                        <div className="text-center">
                           <p className="text-xl font-bold">{flight.departure_time}</p>
                           <p className="text-slate-600">{flight.origin}</p>
                        </div>
                        <div className="flex-1 text-center">
                           <div className="flex items-center justify-center text-slate-500 text-sm">
                             <Clock className="h-4 w-4 mr-1"/> {flight.duration}
                           </div>
                           <div className="relative">
                               <div className="border-t border-dashed border-slate-300 my-2"></div>
                               <Plane className="absolute top-1/2 left-1/2 -translate-x-1/2 -translate-y-1/2 h-5 w-5 text-blue-600 bg-white px-1"/>
                           </div>
                           <p className="text-slate-500 text-sm">{format(parseISO(flight.departure_date), 'EEE, MMM d')}</p>
                        </div>
                        <div className="text-center">
                           <p className="text-xl font-bold">{flight.arrival_time}</p>
                           <p className="text-slate-600">{flight.destination}</p>
                        </div>
                      </div>
                      <div className="text-xs text-slate-500">Flight {flight.flight_number} â€¢ {flight.aircraft_type}</div>
                    </div>

                    <div className="text-center md:text-right space-y-2">
                       <p className="text-sm text-slate-600">From</p>
                       <p className="text-2xl font-bold text-slate-800">${flight.price_economy}</p>
                       <Button onClick={() => setSelectedFlight(flight)} className="w-full md:w-auto">Book Now</Button>
                    </div>
                  </CardContent>
                </Card>
              </motion.div>
            ))
          ) : (
            <Card className="text-center py-12">
              <CardContent>
                <h3 className="text-xl font-semibold text-slate-600 mb-2">No Flights Found</h3>
                <p className="text-slate-500">There are currently no scheduled flights to {destination}.</p>
              </CardContent>
            </Card>
          )}
        </div>
      </div>

      <Dialog open={!!selectedFlight && !bookingSuccess} onOpenChange={closeDialogs}>
        <DialogContent>
          <DialogHeader>
            <DialogTitle>Book Flight to {selectedFlight?.destination}</DialogTitle>
            <DialogDescription>
              Enter your details to confirm your charter booking for flight {selectedFlight?.flight_number}.
            </DialogDescription>
          </DialogHeader>
          <form onSubmit={handleBookingSubmit}>
            <div className="space-y-4 py-4">
              <Input
                placeholder="Full Name"
                value={bookingDetails.passenger_name}
                onChange={(e) => setBookingDetails({ ...bookingDetails, passenger_name: e.target.value })}
                required
              />
              <Input
                type="email"
                placeholder="Email Address"
                value={bookingDetails.passenger_email}
                onChange={(e) => setBookingDetails({ ...bookingDetails, passenger_email: e.target.value })}
                required
              />
            </div>
            <DialogFooter>
              <Button type="button" variant="outline" onClick={closeDialogs}>Cancel</Button>
              <Button type="submit" disabled={isBooking}>
                {isBooking ? "Booking..." : `Confirm for $${selectedFlight?.price_economy}`}
              </Button>
            </DialogFooter>
          </form>
        </DialogContent>
      </Dialog>
      
      <Dialog open={bookingSuccess} onOpenChange={closeDialogs}>
        <DialogContent>
          <DialogHeader>
             <div className="mx-auto flex h-12 w-12 items-center justify-center rounded-full bg-green-100">
                <CheckCircle className="h-6 w-6 text-green-600" />
             </div>
             <DialogTitle className="text-center">Booking Confirmed!</DialogTitle>
             <DialogDescription className="text-center">
                Your flight has been successfully booked. A confirmation has been sent to your email.
             </DialogDescription>
          </DialogHeader>
          <DialogFooter>
             <Button onClick={() => navigate(createPageUrl('MyBookings'))}>View My Bookings</Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>
    </div>
  );
}