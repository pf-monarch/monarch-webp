import React, { useState } from "react";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Card, CardContent } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { 
  Search, 
  Calendar, 
  Users, 
  ArrowRight,
  Plane,
  ArrowLeftRight
} from "lucide-react";
import { motion } from "framer-motion";

export default function FlightSearchCard() {
  const [searchData, setSearchData] = useState({
    from: "",
    to: "",
    departDate: "",
    returnDate: "",
    passengers: "1",
    tripType: "round-trip"
  });

  const handleSearch = () => {
    // Handle flight search
    console.log("Searching flights with:", searchData);
  };

  return (
    <motion.div
      initial={{ opacity: 0, y: 30 }}
      animate={{ opacity: 1, y: 0 }}
      transition={{ duration: 0.8, delay: 0.3 }}
    >
      <Card className="bg-white/95 backdrop-blur-lg border-0 shadow-2xl">
        <CardContent className="p-8">
          {/* Header */}
          <div className="text-center mb-8">
            <div className="flex justify-center mb-4">
              <Plane className="h-8 w-8 text-blue-600" />
            </div>
            <h3 className="text-2xl font-bold text-slate-800 mb-2">Find Your Perfect Flight</h3>
            <p className="text-slate-600">Search and compare flights to your dream destination</p>
          </div>

          {/* Trip Type Selector */}
          <div className="flex gap-2 mb-6 justify-center">
            <Button
              variant={searchData.tripType === "round-trip" ? "default" : "outline"}
              size="sm"
              onClick={() => setSearchData({...searchData, tripType: "round-trip"})}
              className={searchData.tripType === "round-trip" ? "bg-blue-600" : ""}
            >
              Round Trip
            </Button>
            <Button
              variant={searchData.tripType === "one-way" ? "default" : "outline"}
              size="sm"
              onClick={() => setSearchData({...searchData, tripType: "one-way"})}
              className={searchData.tripType === "one-way" ? "bg-blue-600" : ""}
            >
              One Way
            </Button>
            <Button
              variant={searchData.tripType === "multi-city" ? "default" : "outline"}
              size="sm"
              onClick={() => setSearchData({...searchData, tripType: "multi-city"})}
              className={searchData.tripType === "multi-city" ? "bg-blue-600" : ""}
            >
              Multi-City
            </Button>
          </div>

          {/* Search Form */}
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-5 gap-4">
            {/* From */}
            <div className="space-y-2">
              <label className="text-sm font-medium text-slate-700">From</label>
              <div className="relative">
                <Input
                  placeholder="Departure city"
                  value={searchData.from}
                  onChange={(e) => setSearchData({...searchData, from: e.target.value})}
                  className="pl-4 h-12 text-base"
                />
              </div>
            </div>

            {/* To */}
            <div className="space-y-2">
              <label className="text-sm font-medium text-slate-700">To</label>
              <div className="relative">
                <Input
                  placeholder="Destination city"
                  value={searchData.to}
                  onChange={(e) => setSearchData({...searchData, to: e.target.value})}
                  className="pl-4 h-12 text-base"
                />
                <ArrowLeftRight className="absolute right-3 top-3 h-6 w-6 text-slate-400" />
              </div>
            </div>

            {/* Departure Date */}
            <div className="space-y-2">
              <label className="text-sm font-medium text-slate-700">Departure</label>
              <div className="relative">
                <Input
                  type="date"
                  value={searchData.departDate}
                  onChange={(e) => setSearchData({...searchData, departDate: e.target.value})}
                  className="h-12 text-base"
                />
                <Calendar className="absolute right-3 top-3 h-5 w-5 text-slate-400 pointer-events-none" />
              </div>
            </div>

            {/* Return Date */}
            {searchData.tripType === "round-trip" && (
              <div className="space-y-2">
                <label className="text-sm font-medium text-slate-700">Return</label>
                <div className="relative">
                  <Input
                    type="date"
                    value={searchData.returnDate}
                    onChange={(e) => setSearchData({...searchData, returnDate: e.target.value})}
                    className="h-12 text-base"
                  />
                  <Calendar className="absolute right-3 top-3 h-5 w-5 text-slate-400 pointer-events-none" />
                </div>
              </div>
            )}

            {/* Passengers */}
            <div className="space-y-2">
              <label className="text-sm font-medium text-slate-700">Passengers</label>
              <div className="relative">
                <Input
                  type="number"
                  min="1"
                  max="9"
                  value={searchData.passengers}
                  onChange={(e) => setSearchData({...searchData, passengers: e.target.value})}
                  className="h-12 text-base"
                />
                <Users className="absolute right-3 top-3 h-5 w-5 text-slate-400 pointer-events-none" />
              </div>
            </div>
          </div>

          {/* Search Button */}
          <div className="mt-8 text-center">
            <Button 
              size="lg" 
              onClick={handleSearch}
              className="bg-gradient-to-r from-blue-600 to-sky-600 hover:from-blue-700 hover:to-sky-700 px-12 py-4 text-lg font-semibold group"
            >
              <Search className="mr-2 h-5 w-5 group-hover:scale-110 transition-transform" />
              Search Flights
              <ArrowRight className="ml-2 h-5 w-5 group-hover:translate-x-1 transition-transform" />
            </Button>
          </div>

          {/* Popular Routes */}
          <div className="mt-6 pt-6 border-t border-slate-200">
            <p className="text-sm text-slate-600 text-center mb-3">Popular Routes</p>
            <div className="flex flex-wrap justify-center gap-2">
              {[
                "NYC → London",
                "LA → Tokyo", 
                "Miami → Paris",
                "Chicago → Rome",
                "SF → Singapore"
              ].map((route) => (
                <Badge 
                  key={route} 
                  variant="secondary" 
                  className="cursor-pointer hover:bg-blue-100 transition-colors"
                >
                  {route}
                </Badge>
              ))}
            </div>
          </div>
        </CardContent>
      </Card>
    </motion.div>
  );
}